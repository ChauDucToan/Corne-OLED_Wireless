/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
        };

        my_lt: my_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "MY_LT";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
        };

        m_tap_hold: m_tap_hold {
            compatible = "zmk,behavior-hold-tap";
            label = "M_TAP_HOLD";
            bindings = <&msc>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-on-release;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp CAPS  &kp Q            &kp W            &kp E         &kp R              &kp T             &kp Y         &kp U               &kp I         &kp O        &kp P           &kp SCROLLLOCK
&kp HOME  &hml LEFT_GUI A  &hml LEFT_ALT S  &hml LCTRL D  &hml LEFT_SHIFT F  &kp G             &kp H         &hmr RIGHT_SHIFT J  &hmr RCTRL K  &hmr RALT L  &hmr RGUI SEMI  &kp PG_UP
&kp END   &kp Z            &kp X            &kp C         &kp V              &kp B             &kp N         &kp M               &kp COMMA     &kp DOT      &kp FSLH        &kp PG_DN
                                            &kp TAB       &my_lt 1 ESC       &my_lt 2 SPACE    &my_lt 3 RET  &my_lt 4 BACKSPACE  &kp DELETE
            >;
        };

        navigation_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TAB   &none           &kp K_CUT       &kp K_PASTE   &kp K_COPY       &none                         &kp INSERT  &kp K_UNDO     &kp K_REDO  &none      &none  &kp SCROLLLOCK
&kp HOME  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &m_tap_hold SCRL_UP MB1       &kp LEFT    &kp DOWN       &kp UP      &kp RIGHT  &none  &kp PG_UP
&kp END   &none           &none           &none         &none            &m_tap_hold SCRL_DOWN RCLK    &none       &none          &none       &none      &none  &kp PG_DN
                                          &kp TAB       &trans           &kp SPACE                     &kp RET     &kp BACKSPACE  &kp DELETE
            >;
        };

        number_symbol_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp F1     &kp F2  &kp F3  &kp F4    &kp F5    &kp F6       &kp F7          &kp F8          &kp F9        &kp F10          &kp F11  &kp F12
&kp LCTRL  &trans  &trans  &trans    &mkp MB1  &mkp MB2     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans   &trans
&kp LSHFT  &trans  &trans  &trans    &trans    &trans       &trans          &trans          &trans        &trans           &trans   &trans
                           &kp LGUI  &trans    &kp SPACE    &kp RET         &trans          &kp RALT
            >;
        };

        function_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        system_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
